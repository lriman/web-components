"use strict";Object.defineProperty(exports,"__esModule",{value:true});exports["default"]=GeometricPrimitive;var _react=_interopRequireDefault(require("react"));var _propTypes=_interopRequireDefault(require("prop-types"));var _utils=require("../../_utils");var _constants=require("../_constants");var _style=require("../_style");function _interopRequireDefault(obj){return obj&&obj.__esModule?obj:{"default":obj};}function _extends(){_extends=Object.assign||function(target){for(var i=1;i<arguments.length;i++){var source=arguments[i];for(var key in source){if(Object.prototype.hasOwnProperty.call(source,key)){target[key]=source[key];}}}return target;};return _extends.apply(this,arguments);}function _objectWithoutProperties(source,excluded){if(source==null)return{};var target=_objectWithoutPropertiesLoose(source,excluded);var key,i;if(Object.getOwnPropertySymbols){var sourceSymbolKeys=Object.getOwnPropertySymbols(source);for(i=0;i<sourceSymbolKeys.length;i++){key=sourceSymbolKeys[i];if(excluded.indexOf(key)>=0)continue;if(!Object.prototype.propertyIsEnumerable.call(source,key))continue;target[key]=source[key];}}return target;}function _objectWithoutPropertiesLoose(source,excluded){if(source==null)return{};var target={};var sourceKeys=Object.keys(source);var key,i;for(i=0;i<sourceKeys.length;i++){key=sourceKeys[i];if(excluded.indexOf(key)>=0)continue;target[key]=source[key];}return target;}function GeometricPrimitive(props){var type=props.type,color=props.color,width=props.width,height=props.height,children=props.children,rest=_objectWithoutProperties(props,["type","color","width","height","children"]);return/*#__PURE__*/_react["default"].createElement(_style.StyledGeometric,_extends({},(0,_utils.addDataAttributes)({component:_constants.COMPONENTS.GENERAL,type:type}),{sType:type},rest),/*#__PURE__*/_react["default"].createElement(_style.StyledGeometricSvg,{width:"".concat(width,"px"),height:"".concat(height,"px"),viewBox:"0 0 ".concat(width," ").concat(height),focusable:"false",sColor:color},children));}GeometricPrimitive.propTypes={type:_propTypes["default"].oneOf(Object.values(_constants.TYPES)).isRequired,color:_propTypes["default"].oneOf(Object.values(_constants.REFS.COLORS)).isRequired,width:_propTypes["default"].number.isRequired,height:_propTypes["default"].number.isRequired,children:_propTypes["default"].node.isRequired};