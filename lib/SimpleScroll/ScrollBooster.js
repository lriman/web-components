"use strict";Object.defineProperty(exports,"__esModule",{value:true});exports["default"]=void 0;function ownKeys(object,enumerableOnly){var keys=Object.keys(object);if(Object.getOwnPropertySymbols){var symbols=Object.getOwnPropertySymbols(object);if(enumerableOnly)symbols=symbols.filter(function(sym){return Object.getOwnPropertyDescriptor(object,sym).enumerable;});keys.push.apply(keys,symbols);}return keys;}function _objectSpread(target){for(var i=1;i<arguments.length;i++){var source=arguments[i]!=null?arguments[i]:{};if(i%2){ownKeys(Object(source),true).forEach(function(key){_defineProperty(target,key,source[key]);});}else if(Object.getOwnPropertyDescriptors){Object.defineProperties(target,Object.getOwnPropertyDescriptors(source));}else{ownKeys(Object(source)).forEach(function(key){Object.defineProperty(target,key,Object.getOwnPropertyDescriptor(source,key));});}}return target;}function _defineProperty(obj,key,value){if(key in obj){Object.defineProperty(obj,key,{value:value,enumerable:true,configurable:true,writable:true});}else{obj[key]=value;}return obj;}function _classCallCheck(instance,Constructor){if(!(instance instanceof Constructor)){throw new TypeError("Cannot call a class as a function");}}function _defineProperties(target,props){for(var i=0;i<props.length;i++){var descriptor=props[i];descriptor.enumerable=descriptor.enumerable||false;descriptor.configurable=true;if("value"in descriptor)descriptor.writable=true;Object.defineProperty(target,descriptor.key,descriptor);}}function _createClass(Constructor,protoProps,staticProps){if(protoProps)_defineProperties(Constructor.prototype,protoProps);if(staticProps)_defineProperties(Constructor,staticProps);return Constructor;}var getFullWidth=function getFullWidth(elem){return Math.max(elem===null||elem===void 0?void 0:elem.offsetWidth,elem===null||elem===void 0?void 0:elem.scrollWidth);};var getFullHeight=function getFullHeight(elem){return Math.max(elem===null||elem===void 0?void 0:elem.offsetHeight,elem===null||elem===void 0?void 0:elem.scrollHeight);};var textNodeFromPoint=function textNodeFromPoint(element,x,y){var nodes=element.childNodes;var range=document.createRange();for(var i=0;i<nodes.length;i+=1){var node=nodes[i];if(node.nodeType!==3){continue;// eslint-disable-line
}range.selectNodeContents(node);var rect=range.getBoundingClientRect();if(x>=rect.left&&y>=rect.top&&x<=rect.right&&y<=rect.bottom){return node;}}return false;};var clearTextSelection=function clearTextSelection(){var selection=window.getSelection?window.getSelection():document.selection;if(!selection){return;}if(selection.removeAllRanges){selection.removeAllRanges();}else if(selection.empty){selection.empty();}};var CLICK_EVENT_THRESHOLD_PX=5;var ScrollBooster=/*#__PURE__*/function(){/**
   * Create ScrollBooster instance
   * @param {Object} options - options object
   * @param {Element} options.viewport - container element
   * @param {Element} options.content - scrollable content element
   * @param {String} options.direction - scroll direction
   * @param {String} options.pointerMode - mouse or touch support
   * @param {String} options.scrollMode - predefined scrolling technique
   * @param {Boolean} options.bounce - bounce effect
   * @param {Number} options.bounceForce - bounce effect factor
   * @param {Number} options.friction - scroll friction factor
   * @param {Boolean} options.textSelection - enables text selection
   * @param {Boolean} options.inputsFocus - enables focus on input elements
   * @param {Boolean} options.emulateScroll - enables mousewheel emulation
   * @param {Function} options.onClick - click handler
   * @param {Function} options.onUpdate - state update handler
   * @param {Function} options.onWheel - wheel handler
   * @param {Function} options.shouldScroll - predicate to allow or disable scroll
   */function ScrollBooster(){var options=arguments.length>0&&arguments[0]!==undefined?arguments[0]:{};_classCallCheck(this,ScrollBooster);var defaults={content:options.viewport.children[0],direction:'all',// 'vertical', 'horizontal'
pointerMode:'all',// 'touch', 'mouse'
scrollMode:undefined,// 'transform', 'native'
bounce:true,bounceForce:0.1,friction:0.05,textSelection:false,inputsFocus:true,emulateScroll:false,preventDefaultOnEmulateScroll:false,// 'vertical', 'horizontal'
preventPointerMoveDefault:true,lockScrollOnDragDirection:false,// 'vertical', 'horizontal', 'all'
pointerDownPreventDefault:true,dragDirectionTolerance:40,onPointerDown:function onPointerDown(){},onPointerUp:function onPointerUp(){},onPointerMove:function onPointerMove(){},onClick:function onClick(){},onUpdate:function onUpdate(){},onWheel:function onWheel(){},shouldScroll:function shouldScroll(){return true;}};this.props=_objectSpread(_objectSpread({},defaults),options);if(!this.props.viewport||!(this.props.viewport instanceof Element)){// eslint-disable-line
// console.error(`ScrollBooster init error: "viewport" config property must be present and must be Element`);
return;}if(!this.props.content){// console.error(`ScrollBooster init error: Viewport does not have any content`);
return;}this.isDragging=false;this.isTargetScroll=false;this.isScrolling=false;this.isRunning=false;var START_COORDINATES={x:0,y:0};this.position=_objectSpread({},START_COORDINATES);this.velocity=_objectSpread({},START_COORDINATES);this.dragStartPosition=_objectSpread({},START_COORDINATES);this.dragOffset=_objectSpread({},START_COORDINATES);this.clientOffset=_objectSpread({},START_COORDINATES);this.dragPosition=_objectSpread({},START_COORDINATES);this.targetPosition=_objectSpread({},START_COORDINATES);this.scrollOffset=_objectSpread({},START_COORDINATES);this.rafID=null;this.events={};this.updateMetrics();this.handleEvents();}/**
   * Update options object with new given values
   */_createClass(ScrollBooster,[{key:"updateOptions",value:function updateOptions(){var options=arguments.length>0&&arguments[0]!==undefined?arguments[0]:{};this.props=_objectSpread(_objectSpread({},this.props),options);this.props.onUpdate(this.getState());this.startAnimationLoop();}/**
   * Update DOM container elements metrics (width and height)
   */},{key:"updateMetrics",value:function updateMetrics(node){this.viewport={width:this.props.viewport.clientWidth,height:this.props.viewport.clientHeight};this.content={width:getFullWidth(node),height:getFullHeight(node)};this.edgeX={from:Math.min(-(node===null||node===void 0?void 0:node.width)+this.viewport.width,0),to:0};this.edgeY={from:Math.min(-(node===null||node===void 0?void 0:node.height)+this.viewport.height,0),to:0};this.props.onUpdate(this.getState());this.startAnimationLoop();}/**
   * Run animation loop
   */},{key:"startAnimationLoop",value:function startAnimationLoop(){var _this=this;this.isRunning=true;window.cancelAnimationFrame(this.rafID);this.rafID=window.requestAnimationFrame(function(){return _this.animate();});}/**
   * Main animation loop
   */},{key:"animate",value:function animate(){var _this2=this;if(!this.isRunning){return;}this.updateScrollPosition();// stop animation loop if nothing moves
if(!this.isMoving()){this.isRunning=false;this.isTargetScroll=false;}var state=this.getState();this.setContentPosition(state);this.props.onUpdate(state);this.rafID=window.requestAnimationFrame(function(){return _this2.animate();});}/**
   * Calculate and set new scroll position
   */},{key:"updateScrollPosition",value:function updateScrollPosition(){this.applyEdgeForce();this.applyDragForce();this.applyScrollForce();this.applyTargetForce();var inverseFriction=1-this.props.friction;this.velocity.x*=inverseFriction;this.velocity.y*=inverseFriction;if(this.props.direction!=='vertical'){this.position.x+=this.velocity.x;}if(this.props.direction!=='horizontal'){this.position.y+=this.velocity.y;}// disable bounce effect
if((!this.props.bounce||this.isScrolling)&&!this.isTargetScroll){this.position.x=Math.max(Math.min(this.position.x,this.edgeX.to),this.edgeX.from);this.position.y=Math.max(Math.min(this.position.y,this.edgeY.to),this.edgeY.from);}}/**
   * Increase general scroll velocity by given force amount
   */},{key:"applyForce",value:function applyForce(force){this.velocity.x+=force.x;this.velocity.y+=force.y;}/**
   * Apply force for bounce effect
   */},{key:"applyEdgeForce",value:function applyEdgeForce(){if(!this.props.bounce||this.isDragging){return;}// scrolled past viewport edges
var beyondXFrom=this.position.x<this.edgeX.from;var beyondXTo=this.position.x>this.edgeX.to;var beyondYFrom=this.position.y<this.edgeY.from;var beyondYTo=this.position.y>this.edgeY.to;var beyondX=beyondXFrom||beyondXTo;var beyondY=beyondYFrom||beyondYTo;if(!beyondX&&!beyondY){return;}var edge={x:beyondXFrom?this.edgeX.from:this.edgeX.to,y:beyondYFrom?this.edgeY.from:this.edgeY.to};var distanceToEdge={x:edge.x-this.position.x,y:edge.y-this.position.y};var force={x:distanceToEdge.x*this.props.bounceForce,y:distanceToEdge.y*this.props.bounceForce};var restPosition={x:this.position.x+(this.velocity.x+force.x)/this.props.friction,y:this.position.y+(this.velocity.y+force.y)/this.props.friction};if(beyondXFrom&&restPosition.x>=this.edgeX.from||beyondXTo&&restPosition.x<=this.edgeX.to){force.x=distanceToEdge.x*this.props.bounceForce-this.velocity.x;}if(beyondYFrom&&restPosition.y>=this.edgeY.from||beyondYTo&&restPosition.y<=this.edgeY.to){force.y=distanceToEdge.y*this.props.bounceForce-this.velocity.y;}this.applyForce({x:beyondX?force.x:0,y:beyondY?force.y:0});}/**
   * Apply force to move content while dragging with mouse/touch
   */},{key:"applyDragForce",value:function applyDragForce(){if(!this.isDragging){return;}var dragVelocity={x:this.dragPosition.x-this.position.x,y:this.dragPosition.y-this.position.y};this.applyForce({x:dragVelocity.x-this.velocity.x,y:dragVelocity.y-this.velocity.y});}/**
   * Apply force to emulate mouse wheel or trackpad
   */},{key:"applyScrollForce",value:function applyScrollForce(){if(!this.isScrolling){return;}this.applyForce({x:this.scrollOffset.x-this.velocity.x,y:this.scrollOffset.y-this.velocity.y});this.scrollOffset.x=0;this.scrollOffset.y=0;}/**
   * Apply force to scroll to given target coordinate
   */},{key:"applyTargetForce",value:function applyTargetForce(){if(!this.isTargetScroll){return;}this.applyForce({x:(this.targetPosition.x-this.position.x)*0.08-this.velocity.x,y:(this.targetPosition.y-this.position.y)*0.08-this.velocity.y});}/**
   * Check if scrolling happening
   */},{key:"isMoving",value:function isMoving(){return this.isDragging||this.isScrolling||Math.abs(this.velocity.x)>=0.01||Math.abs(this.velocity.y)>=0.01;}/**
   * Set scroll target coordinate for smooth scroll
   */},{key:"scrollTo",value:function scrollTo(){var position=arguments.length>0&&arguments[0]!==undefined?arguments[0]:{};this.isTargetScroll=true;this.targetPosition.x=-position.x||0;this.targetPosition.y=-position.y||0;this.startAnimationLoop();}/**
   * Manual position setting
   */},{key:"setPosition",value:function setPosition(){var position=arguments.length>0&&arguments[0]!==undefined?arguments[0]:{};this.velocity.x=0;this.velocity.y=0;this.position.x=-position.x||0;this.position.y=-position.y||0;this.startAnimationLoop();}/**
   * Get latest metrics and coordinates
   */},{key:"getState",value:function getState(){return{isMoving:this.isMoving(),isDragging:!!(this.dragOffset.x||this.dragOffset.y),position:{x:-this.position.x,y:-this.position.y},dragOffset:this.dragOffset,dragAngle:this.getDragAngle(this.clientOffset.x,this.clientOffset.y),borderCollision:{left:this.position.x>=this.edgeX.to,right:this.position.x<=this.edgeX.from,top:this.position.y>=this.edgeY.to,bottom:this.position.y<=this.edgeY.from}};}/**
   * Get drag angle (up: 180, left: -90, right: 90, down: 0)
   */},{key:"getDragAngle",value:function getDragAngle(x,y){// eslint-disable-line
return Math.round(Math.atan2(x,y)*(180/Math.PI));}/**
   * Get drag direction (horizontal or vertical)
   */},{key:"getDragDirection",value:function getDragDirection(angle,tolerance){// eslint-disable-line
var absAngle=Math.abs(90-Math.abs(angle));if(absAngle<=90-tolerance){return'horizontal';}return'vertical';}/**
   * Update DOM container elements metrics (width and height)
   */},{key:"setContentPosition",value:function setContentPosition(state){if(this.props.scrollMode==='transform'){this.props.content.style.transform="translate(".concat(-state.position.x,"px, ").concat(-state.position.y,"px)");}if(this.props.scrollMode==='native'){this.props.viewport.scrollTop=state.position.y;this.props.viewport.scrollLeft=state.position.x;}}/**
   * Register all DOM events
   */},{key:"handleEvents",value:function handleEvents(){var _this3=this;var dragOrigin={x:0,y:0};var clientOrigin={x:0,y:0};var dragDirection=null;var wheelTimer=null;var isTouch=false;var setDragPosition=function setDragPosition(event){if(!_this3.isDragging){return;}var eventData=isTouch?event.touches[0]:event;var pageX=eventData.pageX,pageY=eventData.pageY,clientX=eventData.clientX,clientY=eventData.clientY;_this3.dragOffset.x=pageX-dragOrigin.x;_this3.dragOffset.y=pageY-dragOrigin.y;_this3.clientOffset.x=clientX-clientOrigin.x;_this3.clientOffset.y=clientY-clientOrigin.y;// get dragDirection if offset threshold is reached
if(Math.abs(_this3.clientOffset.x)>5&&!dragDirection||Math.abs(_this3.clientOffset.y)>5&&!dragDirection){dragDirection=_this3.getDragDirection(_this3.getDragAngle(_this3.clientOffset.x,_this3.clientOffset.y),_this3.props.dragDirectionTolerance);}// prevent scroll if not expected scroll direction
if(_this3.props.lockScrollOnDragDirection&&_this3.props.lockScrollOnDragDirection!=='all'){if(dragDirection===_this3.props.lockScrollOnDragDirection&&isTouch){_this3.dragPosition.x=_this3.dragStartPosition.x+_this3.dragOffset.x;_this3.dragPosition.y=_this3.dragStartPosition.y+_this3.dragOffset.y;}else if(!isTouch){_this3.dragPosition.x=_this3.dragStartPosition.x+_this3.dragOffset.x;_this3.dragPosition.y=_this3.dragStartPosition.y+_this3.dragOffset.y;}else{_this3.dragPosition.x=_this3.dragStartPosition.x;_this3.dragPosition.y=_this3.dragStartPosition.y;}}else{_this3.dragPosition.x=_this3.dragStartPosition.x+_this3.dragOffset.x;_this3.dragPosition.y=_this3.dragStartPosition.y+_this3.dragOffset.y;}};this.events.pointerdown=function(event){isTouch=!!(event.touches&&event.touches[0]);_this3.props.onPointerDown(_this3.getState(),event,isTouch);var eventData=isTouch?event.touches[0]:event;var pageX=eventData.pageX,pageY=eventData.pageY,clientX=eventData.clientX,clientY=eventData.clientY;var viewport=_this3.props.viewport;var rect=viewport.getBoundingClientRect();// click on vertical scrollbar
if(clientX-rect.left>=viewport.clientLeft+viewport.clientWidth){return;}// click on horizontal scrollbar
if(clientY-rect.top>=viewport.clientTop+viewport.clientHeight){return;}// interaction disabled by user
if(!_this3.props.shouldScroll(_this3.getState(),event)){return;}// disable right mouse button scroll
if(event.button===2){return;}// disable on mobile
if(_this3.props.pointerMode==='mouse'&&isTouch){return;}// disable on desktop
if(_this3.props.pointerMode==='touch'&&!isTouch){return;}// focus on form input elements
var formNodes=['input','textarea','button','select','label'];if(_this3.props.inputsFocus&&formNodes.indexOf(event.target.nodeName.toLowerCase())>-1){return;}// handle text selection
if(_this3.props.textSelection){var textNode=textNodeFromPoint(event.target,clientX,clientY);if(textNode){return;}clearTextSelection();}_this3.isDragging=true;if(Math.abs(_this3.position.x-_this3.dragStartPosition.x)>50)_this3.onLoadData();dragOrigin.x=pageX;dragOrigin.y=pageY;clientOrigin.x=clientX;clientOrigin.y=clientY;_this3.dragStartPosition.x=_this3.position.x;_this3.dragStartPosition.y=_this3.position.y;setDragPosition(event);_this3.startAnimationLoop();if(!isTouch&&_this3.props.pointerDownPreventDefault){event.preventDefault();}};this.events.pointermove=function(event){// prevent default scroll if scroll direction is locked
if(event.cancelable&&(_this3.props.lockScrollOnDragDirection==='all'||_this3.props.lockScrollOnDragDirection===dragDirection)){event.preventDefault();}setDragPosition(event);_this3.props.onPointerMove(_this3.getState(),event,isTouch);};this.events.pointerup=function(event){_this3.isDragging=false;dragDirection=null;_this3.props.onPointerUp(_this3.getState(),event,isTouch);};this.events.wheel=function(event){var state=_this3.getState();if(!_this3.props.emulateScroll){return;}_this3.velocity.x=0;_this3.velocity.y=0;_this3.isScrolling=true;_this3.scrollOffset.x=-event.deltaX;_this3.scrollOffset.y=-event.deltaY;_this3.props.onWheel(state,event);_this3.startAnimationLoop();clearTimeout(wheelTimer);wheelTimer=setTimeout(function(){return _this3.isScrolling=false;},80);// eslint-disable-line
// get (trackpad) scrollDirection and prevent default events
if(_this3.props.preventDefaultOnEmulateScroll&&_this3.getDragDirection(_this3.getDragAngle(-event.deltaX,-event.deltaY),_this3.props.dragDirectionTolerance)===_this3.props.preventDefaultOnEmulateScroll){event.preventDefault();}};this.events.scroll=function(){var _this3$props$viewport=_this3.props.viewport,scrollLeft=_this3$props$viewport.scrollLeft,scrollTop=_this3$props$viewport.scrollTop;if(Math.abs(_this3.position.x+scrollLeft)>3){_this3.position.x=-scrollLeft;_this3.velocity.x=0;}if(Math.abs(_this3.position.y+scrollTop)>3){_this3.position.y=-scrollTop;_this3.velocity.y=0;}};this.events.click=function(event){var state=_this3.getState();var dragOffsetX=_this3.props.direction!=='vertical'?state.dragOffset.x:0;var dragOffsetY=_this3.props.direction!=='horizontal'?state.dragOffset.y:0;if(Math.max(Math.abs(dragOffsetX),Math.abs(dragOffsetY))>CLICK_EVENT_THRESHOLD_PX){event.preventDefault();event.stopPropagation();}_this3.props.onClick(state,event,isTouch);};this.events.contentLoad=function(){return _this3.updateMetrics();};this.events.resize=function(){return _this3.updateMetrics();};this.props.viewport.addEventListener('mousedown',this.events.pointerdown);this.props.viewport.addEventListener('touchstart',this.events.pointerdown,{passive:false});this.props.viewport.addEventListener('click',this.events.click);this.props.viewport.addEventListener('wheel',this.events.wheel,{passive:false});this.props.viewport.addEventListener('scroll',this.events.scroll);this.props.content.addEventListener('load',this.events.contentLoad,true);window.addEventListener('mousemove',this.events.pointermove);window.addEventListener('touchmove',this.events.pointermove,{passive:false});window.addEventListener('mouseup',this.events.pointerup);window.addEventListener('touchend',this.events.pointerup);window.addEventListener('resize',this.events.resize);}},{key:"enableOnLoadData",value:function enableOnLoadData(eventHandler){this.onLoadData=eventHandler;}/**
   * Unregister all DOM events
   */},{key:"destroy",value:function destroy(){this.props.viewport.removeEventListener('mousedown',this.events.pointerdown);this.props.viewport.removeEventListener('touchstart',this.events.pointerdown);this.props.viewport.removeEventListener('click',this.events.click);this.props.viewport.removeEventListener('wheel',this.events.wheel);this.props.viewport.removeEventListener('scroll',this.events.scroll);this.props.content.removeEventListener('load',this.events.contentLoad);window.removeEventListener('mousemove',this.events.pointermove);window.removeEventListener('touchmove',this.events.pointermove);window.removeEventListener('mouseup',this.events.pointerup);window.removeEventListener('touchend',this.events.pointerup);window.removeEventListener('resize',this.events.resize);}}]);return ScrollBooster;}();exports["default"]=ScrollBooster;